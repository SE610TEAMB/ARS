package AGV_runtime
public
with ARR_runtime;
ARR_runtime_sensor_handler renames process ARR_runtime::sensor_handler;
	process sensor_handler
	features
		sensor_data : in data port;
		data_out : out data port;
	flows
		new_flow_spec : flow path sensor_data -> data_out;
	end sensor_handler;

	process implementation sensor_handler.GPS
	subcomponents
		new_subcomponent : thread device_input.impl;
		GPS_processing : thread device_processing.impl;
	end sensor_handler.GPS;

	process implementation sensor_handler.radar
	subcomponents
		radar_input_monitoring : thread device_input.impl;
		radar_processing : thread device_processing.impl;
		radar_buffer : data;
	connections
		new_connection : port sensor_data -> radar_input_monitoring.data_in;
		new_connection2 : port radar_input_monitoring.data_out -> radar_processing.data_in;
		new_connection3 : port radar_processing.data_out -> data_out;
	end sensor_handler.radar;

	process implementation sensor_handler.battery
	subcomponents
		new_subcomponent : thread device_input.impl;
		battery_processing : thread device_processing.impl;
	end sensor_handler.battery;

	process actuator_handler
	features
		actuator_feedback : in data port;
		actuator_signal : out event port;
		feedback : out event port;
		cmd : in event data port;
	flows
		new_flow_spec : flow path cmd -> actuator_signal;
		new_flow_spec2 : flow path actuator_feedback -> feedback;
	end actuator_handler;

	process controller
	features
		mission_data_amc : in data port;
		results_amc : out data port;
		results_arr : in data port;
		mission_data_arr : out data port;
		GPS_in : in data port;
		radar_in : in data port;
		battery_in : in data port;
		weight_in : in data port;
		agv_control : in event port;
		arr_control : out event port;
		door_feedback : in event port;
		motor_feedback : in event port;
		motor_out : out event data port;
		door_out : out event data port;
	flows
		new_flow_spec : flow path mission_data_amc -> mission_data_arr;
		new_flow_spec2 : flow path agv_control -> arr_control;
		new_flow_spec3 : flow path results_arr -> results_amc;
		new_flow_spec4 : flow sink motor_feedback;
		new_flow_spec5 : flow sink door_feedback;
		new_flow_spec6 : flow source door_out;
		new_flow_spec7 : flow source motor_out;
		new_flow_spec8 : flow sink GPS_in;
		new_flow_spec9 : flow sink radar_in;
		new_flow_spec10 : flow sink battery_in;
		new_flow_spec11 : flow sink weight_in;
	end controller;

	process implementation controller.impl
	subcomponents
		main : thread logical.impl;
		results : thread result_processing.impl;
		navigation : thread navigation_processing.impl;
		analyzer : thread mission_analyzing.impl;
		generator : thread mission_generating.impl;
		AGV_devices_service : thread device_service.impl;
	connections
		new_connection2 : port AGV_devices_service.motor_out -> motor_out;
		new_connection3 : port AGV_devices_service.door_out -> door_out;
		new_connection4 : port mission_data_amc -> analyzer.mission_data;
		new_connection5 : port agv_control -> analyzer.agv_control_in;
		new_connection6 : port GPS_in -> navigation.GPS_in;
		new_connection7 : port radar_in -> navigation.radar_in;
		new_connection8 : port results_arr -> results.result_in;
		new_connection9 : port analyzer.cmd -> main.agv_cmd;
		new_connection10 : port analyzer.control_out -> main.agv_control;
		new_connection11 : port main.nav_control -> navigation.nav_control;
		new_connection12 : port navigation.nav_feedback -> main.nav_feedback;
		new_connection13 : port main.results_control -> results.results_control;
		new_connection14 : port battery_in -> AGV_devices_service.battery_in;
		new_connection15 : port motor_feedback -> AGV_devices_service.door_feedback;
		new_connection16 : port door_feedback -> AGV_devices_service.motor_feedback;
		new_connection17 : port results.results_feedback -> main.results_feedback;
		new_connection18 : port main.arr_cmd -> generator.cmd;
		new_connection19 : port main.position -> navigation.position;
		new_connection20 : port main.arr_control -> generator.control_in;
		new_connection21 : port generator.mission_data -> mission_data_arr;
		new_connection22 : port generator.arr_control_out -> arr_control;
		new_connection : port results.result_out -> results_amc;
		new_connection23 : port main.device_control -> AGV_devices_service.device_control;
		new_connection24 : port AGV_devices_service.control_feedback -> main.device_feebcak;
		new_connection25 : port main.device_data_assign -> AGV_devices_service.device_data_in;
		new_connection26 : port AGV_devices_service.device_data_out -> main.device_data_get;
	new_connection27 : port navigation.nav_cmd -> main.nav_cmd;
		new_connection28 : port weight_in -> AGV_devices_service.weight_in;
		new_connection29 : port main.agv_info -> results.agv_info;
	end controller.impl;

	thread device_input
	features
		data_in : in data port;
		data_out : out data port;
	flows
		new_flow_spec : flow path data_in -> data_out;
	end device_input;

	thread device_output
	end device_output;

	process implementation actuator_handler.motor
	subcomponents
		new_subcomponent : thread device_output.impl;
		new_subcomponent2 : thread device_input.impl;
	end actuator_handler.motor;

	thread implementation device_input.impl
	end device_input.impl;

	thread implementation device_output.impl
	end device_output.impl;

	thread result_processing
	features
		result_in : in data port;
		result_out : out data port;
		agv_info : in data port;
		results_control : in event port;
		results_feedback : out event port;
	flows
		new_flow_spec : flow path result_in -> result_out;
		new_flow_spec2 : flow sink results_control;
		new_flow_spec3 : flow source results_feedback;
		new_flow_spec4 : flow path agv_info -> result_out;
	end result_processing;

	thread implementation result_processing.impl
	end result_processing.impl;

	thread navigation_processing
	features
		GPS_in : in data port;
		radar_in : in data port;
		position : in data port;
	nav_cmd : out data port;
	nav_control : in event port;
		nav_feedback : out event port;
	flows
		new_flow_spec3 : flow sink nav_control;
		new_flow_spec4 : flow source nav_feedback;
		new_flow_spec : flow path GPS_in -> nav_cmd;
		new_flow_spec2 : flow path position -> nav_cmd;
		new_flow_spec5 : flow path radar_in -> nav_cmd;
	end navigation_processing;

	thread implementation navigation_processing.impl
	end navigation_processing.impl;

	thread logical
	features
		agv_cmd : in data port;
		arr_cmd : out data port;
		position : out data port;
		device_data_assign : out data port;
		device_data_get : in data port;
	nav_cmd : in data port;
		agv_info : out data port;
		agv_control : in event port;
		nav_control : out event port;
		nav_feedback : in event port;
		results_control : out event port;
		results_feedback : in event port;
		device_control : out event port;
		device_feebcak : in event port;
		arr_control : out event port;
	flows
		new_flow_spec : flow path agv_cmd -> arr_cmd;
		new_flow_spec2 : flow path agv_control -> arr_control;
		new_flow_spec3 : flow path nav_cmd -> device_data_assign;
		new_flow_spec4 : flow path nav_cmd -> device_control;
		new_flow_spec5 : flow path agv_cmd -> nav_control;
		new_flow_spec6 : flow sink nav_feedback;
		new_flow_spec7 : flow sink results_feedback;
		new_flow_spec8 : flow path device_data_get -> position;
		new_flow_spec9 : flow sink device_feebcak;
		new_flow_spec10 : flow source results_control;
		new_flow_spec11 : flow source device_control;
		new_flow_spec12 : flow source device_data_assign;
		new_flow_spec13 : flow sink device_data_get;
		new_flow_spec14 : flow source nav_control;
		new_flow_spec15 : flow path results_feedback -> agv_info;
		new_flow_spec16 : flow path device_feebcak -> agv_info;
		new_flow_spec17 : flow path device_data_get -> agv_info;
		new_flow_spec18 : flow path nav_feedback -> agv_info;
	end logical;

	thread implementation logical.impl
	end logical.impl;

	thread device_processing
	features
		data_in : in data port;
		data_out : out data port;
	flows
		new_flow_spec : flow path data_in -> data_out;
	end device_processing;

	thread implementation device_processing.impl
	end device_processing.impl;

	process mission_decoder
	features
		mission_data_in : in data port;
		mission_data_out : out data port;
		mission_control_in : in event port;
		mission_control_out : out event port;
	flows
		new_flow_spec : flow path mission_data_in -> mission_data_out;
		new_flow_spec2 : flow path mission_control_in -> mission_control_out;
	end mission_decoder;

	process implementation mission_decoder.impl
	end mission_decoder.impl;

	process mission_encoder
	features
		mission_data_in : in data port;
		mission_data_out : out data port;
		mission_control_out : out event port;
		mission_control_in : in event port;
	flows
		new_flow_spec : flow path mission_data_in -> mission_data_out;
		new_flow_spec2 : flow path mission_control_in -> mission_control_out;
	end mission_encoder;

	process implementation mission_encoder.impl
	end mission_encoder.impl;

	process result_decoder
	features
		mission_results : in data port;
		vehicle_state : in data port;
		results : out data port;
	flows
		new_flow_spec : flow path mission_results -> results;
		new_flow_spec2 : flow path vehicle_state -> results;
	end result_decoder;

	process result_encoder
	features
		mission_results : out data port;
		vehicle_state : out data port;
		results : in data port;
	flows
		new_flow_spec : flow path results -> mission_results;
		new_flow_spec2 : flow path results -> vehicle_state;
	end result_encoder;

	process implementation result_decoder.impl
	end result_decoder.impl;

	process implementation result_encoder.impl
	end result_encoder.impl;

	process implementation actuator_handler.door
	end actuator_handler.door;

	thread mission_analyzing
	features
		mission_data : in data port;
		cmd : out data port;
		agv_control_in : in event port;
		control_out : out event port;
	flows
		new_flow_spec : flow path mission_data -> cmd;
		new_flow_spec2 : flow path agv_control_in -> control_out;
	end mission_analyzing;

	thread implementation mission_analyzing.impl
	end mission_analyzing.impl;

	thread mission_generating
	features
		cmd : in data port;
		mission_data : out data port;
		control_in : in event port;
		arr_control_out : out event port;
	flows
		new_flow_spec : flow path cmd -> mission_data;
		new_flow_spec2 : flow path control_in -> arr_control_out;
	end mission_generating;

	thread implementation mission_generating.impl
	end mission_generating.impl;

	thread device_service
	features
		battery_in : in data port;
		device_data_out : out data port;
		device_data_in : in data port;
		weight_in : in data port;
		door_feedback : in event port;
		motor_feedback : in event port;
		device_control : in event port;
		control_feedback : out event port;
		door_out : out event data port;
		motor_out : out event data port;
	flows
		new_flow_spec : flow path battery_in -> device_data_out;
		new_flow_spec2 : flow path device_data_in -> door_out;
		new_flow_spec3 : flow path device_data_in -> motor_out;
		new_flow_spec4 : flow path door_feedback -> control_feedback;
		new_flow_spec5 : flow path motor_feedback -> control_feedback;
		new_flow_spec6 : flow path weight_in -> device_data_out;
		new_flow_spec7 : flow path device_control -> door_out;
		new_flow_spec8 : flow path device_control -> motor_out;
	end device_service;

	thread implementation device_service.impl
	end device_service.impl;

	process implementation sensor_handler.weight
	end sensor_handler.weight;

end AGV_runtime;