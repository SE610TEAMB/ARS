package ARR_runtime
public
with AGV_runtime;
AGV_runtime_navigation_processing renames thread AGV_runtime::navigation_processing;
AGV_runtime_sensor_handler renames process AGV_runtime::sensor_handler;
	process sensor_handler
	features
		sensor_data : in data port;
		data_out : out data port;
	flows
		new_flow_spec : flow path sensor_data -> data_out;
	end sensor_handler;

	process controller
	features
		mission_data_agv : in data port;
		results_agv : out data port;
		battery_in : in data port;
		camera_in : in data port;
		GPS_in : in data port;
		microphone_in : in data port;
		radar_in : in data port;
		mission_cotrol_agv : in event port;
		arm_feedback : in event port;
		motor_feedback : in event port;
		arm_signal : out event data port;
	motor_single : out event data port;
	flows
		new_flow_spec : flow sink mission_cotrol_agv;
		new_flow_spec2 : flow sink mission_data_agv;
		new_flow_spec3 : flow sink radar_in;
		new_flow_spec4 : flow path microphone_in -> results_agv;
		new_flow_spec5 : flow path camera_in -> results_agv;
		new_flow_spec6 : flow sink battery_in;
		new_flow_spec7 : flow sink motor_feedback;
		new_flow_spec8 : flow sink arm_feedback;
		new_flow_spec9 : flow sink GPS_in;
		new_flow_spec10 : flow source arm_signal;
		new_flow_spec11 : flow source motor_single;
	end controller;

	process actuator_handler
	features
		actuator_feedback : in data port;
		actuator_signal : out event port;
		feedback : out event port;
		cmd : in event data port;
	flows
		new_flow_spec : flow path cmd -> actuator_signal;
		new_flow_spec2 : flow path actuator_feedback -> feedback;
	end actuator_handler;

	process implementation actuator_handler.arm
	end actuator_handler.arm;

	process implementation sensor_handler.GPS
	end sensor_handler.GPS;

	process implementation sensor_handler.camera
	end sensor_handler.camera;

	process implementation sensor_handler.microphone
	end sensor_handler.microphone;

	process implementation sensor_handler.battery
	end sensor_handler.battery;

	process implementation actuator_handler.motor
	end actuator_handler.motor;

	process implementation controller.impl
	subcomponents
		main : thread logical.impl;
		navigation : thread navigation_processing.impl;
		video : thread media_encoding.impl;
	mission_analyzer : thread mission_analyzing.impl;
	new_subcomponent : thread decision_procession.impl;
	results : thread AGV_runtime::result_processing.impl;
	new_subcomponent2 : thread device_service.impl;
connections
	new_connection : port video.results_media_out -> results.result_in;
	new_connection2 : port mission_data_agv -> mission_analyzer.mission_data;
	new_connection3 : port mission_cotrol_agv -> mission_analyzer.agv_control_in;
	new_connection4 : port GPS_in -> navigation.GPS_in;
	new_connection5 : port radar_in -> navigation.radar_in;
	new_connection6 : port video.decision_media_out -> new_subcomponent.media_in;
	new_connection7 : port camera_in -> video.video_in;
		new_connection8 : port main.decision_control -> new_subcomponent.decision_control;
		new_connection9 : port new_subcomponent.decision_feedback -> main.decision_feedback;
		new_connection10 : port mission_analyzer.control_out -> main.arr_control;
		new_connection11 : port mission_analyzer.cmd -> main.arr_cmd;
		new_connection12 : port main.nav_control -> navigation.nav_control;
		new_connection13 : port navigation.nav_feedback -> main.nav_feedback;
		new_connection14 : port main.position -> navigation.position;
		new_connection15 : port navigation.nav_cmd -> main.nav_cmd;
		new_connection16 : port new_subcomponent.decision -> main.decision_in;
		new_connection17 : port main.media_control -> video.media_control;
	new_connection18 : port video.media_feedback -> main.media_feedback;
	new_connection19 : port microphone_in -> video.audio_in;
	new_connection20 : port main.device_control -> new_subcomponent2.device_control;
	new_connection21 : port new_subcomponent2.control_feedback -> main.device_feeback;
	new_connection22 : port new_subcomponent2.device_data_out -> main.device_data_get;
	new_connection23 : port main.device_data_assign -> new_subcomponent2.device_data_in;
	new_connection24 : port main.results_control -> results.results_control;
	new_connection25 : port results.results_feedback -> main.results_feedback;
	new_connection26 : port battery_in -> new_subcomponent2.battery_in;
	new_connection27 : port new_subcomponent2.arm_out -> arm_signal;
	new_connection28 : port arm_feedback -> new_subcomponent2.arm_feedback;
	new_connection29 : port new_subcomponent2.motor_out -> motor_single;
	new_connection30 : port motor_feedback -> new_subcomponent2.motor_feedback;
	new_connection31 : port results.result_out -> results_agv;
end controller.impl;

	process mission_decoder
	features
		mission_data_in : in data port;
		mission_data_out : out data port;
		mission_control_in : in event port;
		mission_control_out : out event port;
	end mission_decoder;

	process implementation mission_decoder.impl
	end mission_decoder.impl;
		process result_encoder
	features
		mission_results : out data port;
		vehicle_state : out data port;
		results : in data port;
	end result_encoder;


	process implementation result_encoder.impl
	end result_encoder.impl;


	thread logical
	features
		arr_cmd : in data port;
		position : out data port;
		device_data_assign : out data port;
		device_data_get : in data port;
		decision_in : in data port;
	nav_cmd : in data port;
	arr_control : in event port;
		nav_control : out event port;
		nav_feedback : in event port;
		media_control : out event port;
		media_feedback : in event port;
		results_control : out event port;
		results_feedback : in event port;
		device_control : out event port;
		device_feeback : in event port;
		decision_control : out event port;
		decision_feedback : in event port;
	end logical;

	thread implementation logical.impl
	end logical.impl;
	
	thread mission_analyzing
	features
		mission_data : in data port;
		cmd : out data port;
		agv_control_in : in event port;
		control_out : out event port;
	end mission_analyzing;

	thread implementation mission_analyzing.impl
	end mission_analyzing.impl;

	thread media_encoding
features
	video_in : in data port;
	audio_in : in data port;
	decision_media_out : out data port;
	results_media_out : out data port;
	media_control : in event port;
	media_feedback : out event port;
end media_encoding;

	thread implementation media_encoding.impl
	end media_encoding.impl;

	thread navigation_processing
	features
		GPS_in : in data port;
		radar_in : in data port;
		position : in data port;
	nav_cmd : out data port;
	nav_control : in event port;
		nav_feedback : out event port;
	end navigation_processing;

	thread implementation navigation_processing.impl
	end navigation_processing.impl;

	process implementation sensor_handler.radar
	end sensor_handler.radar;

	thread decision_procession
features
	media_in : in data port;
	decision : out data port;
	decision_control : in event port;
	decision_feedback : out event port;
end decision_procession;

	thread implementation decision_procession.impl
	end decision_procession.impl;
	
	thread device_service
	features
		battery_in : in data port;
		device_data_out : out data port;
		device_data_in : in data port;
		motor_feedback : in event port;
		device_control : in event port;
		control_feedback : out event port;
		arm_feedback : in event port;
		motor_out : out event data port;
		arm_out : out event data port;
end device_service;

	thread implementation device_service.impl
	end device_service.impl;
	

end ARR_runtime;